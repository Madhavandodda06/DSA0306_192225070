import nltk
from nltk.chunk.regexp import RegexpParser

def extract_noun_phrases(sentence):
    # Tokenize the sentence
    tokens = nltk.word_tokenize(sentence)
    
    # Perform part-of-speech tagging
    tagged_tokens = nltk.pos_tag(tokens)
    
    # Define a chunk grammar to extract noun phrases
    grammar = r"""
        NP: {<DT|JJ|NN.*>+} # Chunk sequences of DT, JJ, NN
    """
    parser = RegexpParser(grammar)
    
    # Parse the tagged tokens to extract noun phrases
    parsed_sentence = parser.parse(tagged_tokens)
    
    # Extract noun phrases and their meanings
    noun_phrases = []
    for subtree in parsed_sentence.subtrees():
        if subtree.label() == 'NP':
            noun_phrase = ' '.join(word for word, tag in subtree.leaves())
            noun_phrases.append(noun_phrase)
    
    return noun_phrases

if __name__ == "__main__":
    sentence = "The quick brown fox jumps over the lazy dog"
    noun_phrases = extract_noun_phrases(sentence)
    print("Noun Phrases:", noun_phrases)
