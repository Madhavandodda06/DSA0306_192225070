import math
from collections import Counter

class TFIDF:
    def __init__(self, documents):
        self.documents = documents
        self.document_count = len(documents)
        self.tf_scores = []
        self.idf_scores = {}
        self.tfidf_scores = []

    def calculate_tf(self, document):
        word_count = len(document.split())
        term_frequency = Counter(document.split())
        tf_scores = {term: count / word_count for term, count in term_frequency.items()}
        return tf_scores

    def calculate_idf(self):
        all_terms = [term for document in self.documents for term in document.split()]
        document_frequency = Counter(all_terms)
        idf_scores = {term: math.log(self.document_count / (document_frequency[term] + 1)) for term in document_frequency}
        return idf_scores

    def calculate_tfidf(self):
        self.tf_scores = [self.calculate_tf(document) for document in self.documents]
        self.idf_scores = self.calculate_idf()

        self.tfidf_scores = []
        for tf_score in self.tf_scores:
            tfidf_score = {term: tf * self.idf_scores[term] for term, tf in tf_score.items()}
            self.tfidf_scores.append(tfidf_score)

    def rank_documents(self, query):
        query_tf = self.calculate_tf(query)
        query_tfidf = {term: tf * self.idf_scores.get(term, 0) for term, tf in query_tf.items()}

        scores = []
        for idx, tfidf_score in enumerate(self.tfidf_scores):
            score = sum(query_tfidf.get(term, 0) * tfidf_score.get(term, 0) for term in query_tf.keys())
            scores.append((idx, score))

        ranked_documents = sorted(scores, key=lambda x: x[1], reverse=True)
        return ranked_documents

if __name__ == "__main__":
    documents = [
        "TF-IDF stands for Term Frequency-Inverse Document Frequency.",
        "It is a numerical statistic used to reflect the importance of a word to a document in a collection.",
        "The importance increases proportionally to the number of times a word appears in the document but is offset by the frequency of the word in the collection of documents."
    ]

    ir_system = TFIDF(documents)
    ir_system.calculate_tfidf()

    query = "TF-IDF is a numerical statistic."
    ranked_documents = ir_system.rank_documents(query)

    print("Ranked Documents:")
    for idx, score in ranked_documents:
        print(f"Document {idx + 1}: Score {score}")
